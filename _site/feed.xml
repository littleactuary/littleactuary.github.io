<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Little Actuary</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2016-01-17T00:34:18+01:00</updated>
<id>/</id>
<author>
  <name>Duc-Hien VU</name>
  <uri>/</uri>
  <email>duchienvu91@gmail.com</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Web application framework with Shiny]]></title>
  <link rel="alternate" type="text/html" href="/blog/Web-application-framework-with-Shiny/" />
  <id>/blog/Web-application-framework-with-Shiny</id>
  <published>2015-11-30T20:39:55+01:00</published>
  <updated>2015-11-30T20:39:55+01:00</updated>
  <author>
    <name>Duc-Hien VU</name>
    <uri></uri>
    <email>duchienvu91@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;In my final internship, I had to deploy an application for large claims (major losses) reserving. Since the method required some serious statistical modeling methods, I didn’t choose Excel/VBA. R seemed to be a good choice because of its statistical power and also of some useful R packages that deal with extreme values theory and distribution fitting. The question was: “How can I build a frinedly-user application with R?”. The idea is that the end users don’t need to open R and run a hundred line of R code. My first thought was to install RExcel in order to use Excel spredsheet as the application interface. I had found a short presentation of using RExcel with the ChainLadder package in R but this solution seems to be a little out of date. Then I tried the TclTk package in R. Not too cool in my opinion! Finally I found something amazing called &lt;a href=&quot;http://shiny.rstudio.com&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Shiny&lt;/strong&gt;&lt;/a&gt;. It’s an R package that allows you to deploy an interactive web application with R.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#get-inspired&quot; id=&quot;markdown-toc-get-inspired&quot;&gt;Get inspired&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-is-shiny&quot; id=&quot;markdown-toc-what-is-shiny&quot;&gt;What is Shiny?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-learn-shiny&quot; id=&quot;markdown-toc-how-to-learn-shiny&quot;&gt;How to learn Shiny?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shiny-structure&quot; id=&quot;markdown-toc-shiny-structure&quot;&gt;Shiny structure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#some-shiny-codes&quot; id=&quot;markdown-toc-some-shiny-codes&quot;&gt;Some Shiny codes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-next&quot; id=&quot;markdown-toc-what-next&quot;&gt;What next?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;get-inspired&quot;&gt;Get inspired&lt;/h2&gt;

&lt;p&gt;To get you inspired, &lt;a href=&quot;http://shiny.rstudio.com/gallery/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;here’s a galery of Shiny applications&lt;/strong&gt;&lt;/a&gt;
You will see that R users have made many amazing applications with Shiny. Since I just passed a little time of my internship to deploy the application (my main mission is to develop the actuarial model), I couldn’t build a very complex one, but I think it seems already cooler than an Excel spredsheet. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/MajorLossesReserving.gif&quot;&gt;&lt;img src=&quot;/images/MajorLossesReserving.gif&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-shiny&quot;&gt;What is Shiny?&lt;/h2&gt;

&lt;p&gt;Ok, now we will look a little bit closer to Shiny. Firstly, Shiny proposes functions with R syntaxes that replace HTML, CSS, Javascript. So you can somehow build a web interface by writing R code. Secondly, Shiny has a feature called Interactivity, which is, in my opinion, a big difference compared to standard R program. There’s an interaction between the client side (through the user interface) and the server side (your R program). Thirdly, you can run Shiny apps locally with RStudio and its browser or with R and a web browser such as Google Chrome or Internet Explorer. You can also upload your apps on a cloud (the Shiny server) and run them online. I didn’t try the last option because of the confidentiality concern. So I will show you in this post how to deploy and run a Shiny app locally on you computer.&lt;/p&gt;

&lt;p&gt;Let’s begin by installing the Shiny package&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;install.packages&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Shiny&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-to-learn-shiny&quot;&gt;How to learn Shiny?&lt;/h2&gt;
&lt;p&gt;The best way to learn Shiny, of course, is to watch the series of &lt;a href=&quot;http://shiny.rstudio.com/tutorial/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Shiny tutorials&lt;/strong&gt;&lt;/a&gt; It will cover all the Shiny topics from beginner to advanced level. It however takes time. What I did in my internship is to look at a simple Shiny example and then began directly to build my app. When there was something I didn’t know how to do, I googled it. It is maybe not a good habit of learning, but in a limit time constraint, it has allowed me to build an application that meets all my need (eventhough it’s not optimal).&lt;/p&gt;

&lt;p&gt;So the point is, the series of Shiny tutorials is where to start learning from. Other useful guides could by found on Goolge. Since I have passed some time on doing the same thing, I’ll try to list all the important points I have learned about Shiny in the next sections for you, so that you don’t have to google too many times when developing your Shiny app.&lt;/p&gt;

&lt;h2 id=&quot;shiny-structure&quot;&gt;Shiny structure&lt;/h2&gt;

&lt;p&gt;The logic of Shiny relies on the two notions that are very close to the web ones: client side and server side. Client side is the component in interaction with the end-users. Server side is the component through what your R program receives requests from users, runs R code and then send the response to the client side.&lt;/p&gt;

&lt;center&gt;
&lt;a href=&quot;/images/shiny_scheme.png&quot;&gt;&lt;img src=&quot;/images/shiny_scheme.png&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;
&lt;/center&gt;

&lt;p&gt;Based on this principle, Shiny requires 2 R scripts: one for the User Interface, named &lt;code&gt;ui.r&lt;/code&gt;, and one for the Server, named &lt;code&gt;server.r&lt;/code&gt;. What you want to display on the the interface needs to be declared in the &lt;code&gt;ui.r&lt;/code&gt; script; how this thing is done needs to be defined in &lt;code&gt;server.r&lt;/code&gt;. Below is a typical structure of a Shiny application:&lt;/p&gt;

&lt;center&gt;
&lt;a href=&quot;/images/shiny_structure.png&quot;&gt;&lt;img src=&quot;/images/shiny_structure.png&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;
&lt;/center&gt;

&lt;p&gt;R calls the Shiny app in a main script, thanks to the Shiny package. I prefer to create a folder named &lt;code&gt;Shiny folder&lt;/code&gt; where I store 2 principal elements: &lt;code&gt;ui.r&lt;/code&gt; and &lt;code&gt;server.r&lt;/code&gt;. You may notice that there is third element named &lt;code&gt;www&lt;/code&gt;. It’s a sub-folder where I store graphical elements (images, icons, etc.) and file (pdf) that I want to display on my application. (Attention, these three elements need to be named exactly like that). I didn’t show it in the scheme but the &lt;code&gt;server.r&lt;/code&gt; can call other R scripts. Normally, an application has to read input files stored somewhere that I’ve named &lt;code&gt;Input folder&lt;/code&gt; and write output files (in addition of displaying them on the user interface) in &lt;code&gt;Output folder&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The user interface can be displayed on the default browser of RStudio if you run Shiny through it, or on a web browser (if you are using Internet explorer version &amp;lt; 10, you could get into trouble with Shiny). This user interface works exactly like a web page. There are buttons, input text, etc. for you to make your decision and there will be output (graphs, images, tables, etc.) displayed on the main panel, or separately on different tabs.&lt;/p&gt;

&lt;h2 id=&quot;some-shiny-codes&quot;&gt;Some Shiny codes&lt;/h2&gt;

&lt;h3 id=&quot;choosing-browser&quot;&gt;Choosing Browser&lt;/h3&gt;
&lt;p&gt;You can either launch your Shiny app on the RStudio browser:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;Shiny&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;runApp&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;./Shiny folder/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(An alternative way: in RStudio, when you open &lt;code&gt;server.r&lt;/code&gt; and &lt;code&gt;ui.r&lt;/code&gt;, you can see the &lt;code&gt;Run App&lt;/code&gt; button on the top right. You can launch your app by clicking on it) 
If you want to launch you app on your default web browser instead of the browser of RStudio:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;Shiny&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;runApp&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;./Shiny folder/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; launch.browser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;shiny-theme&quot;&gt;Shiny theme&lt;/h3&gt;

&lt;p&gt;Shiny has some pre-built themes for you. All you need to do is to install the &lt;a href=&quot;http://rstudio.github.io/shinythemes/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;shiny theme&lt;/strong&gt;&lt;/a&gt; package and choose the theme you want.&lt;/p&gt;

&lt;h3 id=&quot;title-panel&quot;&gt;Title panel&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;ui.r&lt;/code&gt;, you can define a header for you application where you show the app name and the logo for example. This is done thanks to the &lt;code&gt;titlePanel()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;shinyUI&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;fluidPage&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    theme &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; shinytheme&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cerulean&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Application title&lt;/span&gt;
    titlePanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        fluidRow&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            column&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; strong&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Name of you application&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;align &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;center&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            column&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;img&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;src &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;logo.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; height &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; width &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

    sidebarLayout&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        sidebarPanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        mainPanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since the Shiny interface is a web interface, it is designed with the famous Bootstrap framework. The Shiny page is divided into 12 columns and all elements will be arranged according to these 12 columns. Here I devided the title panel into 2 parts, the first one takes 9/12 columns to show the app name, the second one takes 3/12 collumns to show the logo. Please note that logo.png needs to be stored in the &lt;code&gt;www&lt;/code&gt;sub-folder.&lt;/p&gt;

&lt;h3 id=&quot;tab-panel&quot;&gt;Tab panel&lt;/h3&gt;

&lt;p&gt;Look at the screenshot of the application I’ve created in my internship. There are different tab panels. You can create as many tab panels (and sub-tab panels) as you want.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;mainPanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;

    tabsetPanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; 
        tabPanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tab 1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            tabsetPanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                tabPanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sub-tab 1a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; dataTableOutput&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;st1a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                tabPanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sub-tab 1b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; dataTableOutput&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;st1b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# end of tab 1&lt;/span&gt;

        tabPanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tab 2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            tabsetPanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                tabPanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sub-tab 2a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; dataTableOutput&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;st2a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                tabPanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sub-tab 2b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; dataTableOutput&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;st2b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;event-reactivity&quot;&gt;Event reactivity&lt;/h3&gt;
&lt;p&gt;You want to create a button in the user interface so that your app does something in response to the users demand when they click on the button?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# in ui.r&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# define the Inputs Reading button&lt;/span&gt;
actionButton&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;read_inputs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Read Inputs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# in server.r:&lt;/span&gt;
variable1 &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; eventReactive&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;read_inputs&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# what you want to do when the user clicks on the button&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;two-way-to-display-a-table&quot;&gt;Two way to display a table&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;server.r&lt;/code&gt;, to put a table into the output() list in order to display it on the user interface later, you can either use the &lt;code&gt;renderTable()&lt;/code&gt; (not pretty) or the &lt;code&gt;renderDataTable()&lt;/code&gt; (much more beautiful). With the second function, you can customize the table with options.
For example, if you want to show your entire table in one page and desactivate the search option:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;example &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; renderDataTable&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# your table&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;options &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;searching &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; searchable&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; info&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; paging &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To customize the page length, the column width:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;options &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;lengthMenu &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;15&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;30&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;50&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;All&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; pageLength &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; autoWidth &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; columnDefs &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;width &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;200px&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; targets &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;streamlining-your-shiny-apps&quot;&gt;Streamlining your Shiny apps&lt;/h3&gt;
&lt;p&gt;Sometimes, you need to order different parts of code in a given scenario. Unlike the normal logic of R, Shiny doesn’t interprete your code in the descending order. In &lt;code&gt;server.r&lt;/code&gt; each bloc of code aims to return an output element and Shiny will interprete them almost simultaneously. It’s very often that one output element depends on others. In Shiny you need to tell the program when to do or to not do something.&lt;/p&gt;

&lt;p&gt;The simplest way is to create reactive button so that a bloc of code will only be interpreted when the user clicks on the button. However, I find it not practical to create too many buttons.&lt;/p&gt;

&lt;p&gt;A good way is to use reactive expressions that let you control which parts of your app update when. You can take a look at &lt;a href=&quot;http://shiny.rstudio.com/tutorial/lesson6/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;this tutorial&lt;/strong&gt;&lt;/a&gt; for a better understanding of reactive expressions.&lt;/p&gt;

&lt;p&gt;Sometimes I find it more convenient to manually streamline my program by using &lt;code&gt;reactiveValues&lt;/code&gt; as a condition. The idea is to create reactive boolean variables to trigger a bloc of code.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;display.order &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; reactiveValues&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;part2 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; part3 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;conditional-panel&quot;&gt;Conditional panel&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;ui.r&lt;/code&gt;, you can tell Shiny when to show or not to show an output element with a specific condition:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;conditionalPanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;condition &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;input.currency == &amp;#39;EUR&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;  
conditionalPanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;condition &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;input.currency == &amp;#39;GBP&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;loading-circle&quot;&gt;Loading circle&lt;/h3&gt;
&lt;p&gt;Sometimes it takes time to run your code and you want to tell the users that the R program is still running. Like a web page loading, you can show a loading circle whenever your R program is busy. To do so, you first need to save this “loading_circle.gif” image into the &lt;code&gt;www&lt;/code&gt; folder,&lt;/p&gt;

&lt;center&gt;
&lt;a href=&quot;/images/loading_circle.gif&quot;&gt;&lt;img src=&quot;/images/loading_circle.gif&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;
&lt;/center&gt;

&lt;p&gt;and then add this line of code in the &lt;code&gt;ui.r&lt;/code&gt;, in a specific area that you want to show the loading circle:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;conditionalPanel&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;condition&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$(&amp;#39;html&amp;#39;).hasClass(&amp;#39;shiny-busy&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
tags&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;img&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;src&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;loading_circle.gif&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;closing-your-app&quot;&gt;Closing your app&lt;/h3&gt;

&lt;p&gt;2 options to close your app: create a button “close” in &lt;code&gt;ui.r&lt;/code&gt; and add this in &lt;code&gt;server.r&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;observe&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;close &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        stopApp&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or close your app when the browser is closed:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;shinyServer&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; output&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; session&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    session&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;onSessionEnded&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        stopApp&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;what-next&quot;&gt;What next?&lt;/h2&gt;
&lt;p&gt;Until now, you still need to open R and launch Shiny from within it. If your app will be used by other people, it will be cool to create an independent desktop app that users can launch by clicking on an icon, like other applications in your computer. We will talk about it in the next post.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/blog/Web-application-framework-with-Shiny/&quot;&gt;Web application framework with Shiny&lt;/a&gt; was originally published by Duc-Hien VU at &lt;a href=&quot;&quot;&gt;Little Actuary&lt;/a&gt; on November 30, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Calling C++ from R with Rcpp]]></title>
  <link rel="alternate" type="text/html" href="/blog/connecting-R-and-Cpp-with-Rcpp/" />
  <id>/blog/connecting-R-and-Cpp-with-Rcpp</id>
  <published>2015-11-25T20:39:55+01:00</published>
  <updated>2015-11-25T20:39:55+01:00</updated>
  <author>
    <name>Duc-Hien VU</name>
    <uri></uri>
    <email>duchienvu91@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;If you are an R user, you may know that R is potentially slow compared to other languages such as Matlab, Java or C/C++. It’s highly recommended to avoid using loops in R. A common alternative way is to vectorize your program, i.e. to use vectors and matrices. There is a family of &lt;code&gt;apply()&lt;/code&gt;functions developed in R to help you work with vectors, matrices, dataframes. These functions are better than a naive loop in R, but still struggle when the dimension of your vectors or matrices is too big. A better solution I want to talk about in this post is the Rcpp package which provides a C++ API as an extension to the R system. FYI, many R packages today rely on Rcpp.&lt;/p&gt;

&lt;p&gt;If you are strong enough to code your whole program in C++, well, I have nothing more to say. No other languages can beat C++ in term of speed. But if you choose to stay with R (because you are familiar with many useful R packages and pre-built functions that can save you a lot of time compared to C++), and if you are an occasional C++ user, you may try &lt;code&gt;Rcpp&lt;/code&gt;. Keep building your tool with R and you only need to code some parts in C++ and then call them in your R program through Rcpp. I will show you how well Rcpp performs. But first, let’s do some preparation.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-rtools&quot; id=&quot;markdown-toc-installing-rtools&quot;&gt;Installing Rtools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-rcpp-package&quot; id=&quot;markdown-toc-installing-rcpp-package&quot;&gt;Installing Rcpp package&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-rcpp&quot; id=&quot;markdown-toc-using-rcpp&quot;&gt;Using Rcpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#performance-comparison&quot; id=&quot;markdown-toc-performance-comparison&quot;&gt;Performance comparison&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#real-life-application-of-rcpp&quot; id=&quot;markdown-toc-real-life-application-of-rcpp&quot;&gt;Real-life application of Rcpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#to-go-further&quot; id=&quot;markdown-toc-to-go-further&quot;&gt;To go further&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;installing-rtools&quot;&gt;Installing Rtools&lt;/h2&gt;

&lt;p&gt;This step is for Windows users only! If you are using Mac, you just need to install Xcode and go to the next section.&lt;/p&gt;

&lt;p&gt;We need to install Rtools in order to have a C++ compilator. Please &lt;a href=&quot;https://cran.r-project.org/bin/windows/Rtools/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;download Rtools here&lt;/strong&gt;&lt;/a&gt;. Make sure that you are downloading a Rtools version compatible with your R system. After installing Rtools, the environment variable PATH needs to be re-defined to tell R where to find the C++ compilator.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If your computer does not require an admin mode, it will be done automatically.&lt;/li&gt;
  &lt;li&gt;Otherwise (when using a computer at work for example), you have to do it manually. First go to Control Panel, pull down the admin password and then add the below line in your PATH:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;kt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;\Rtools\bin &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;\Rtools\gcc&lt;span class=&quot;m&quot;&gt;-4.6.3&lt;/span&gt;\bin &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To check whether or not Rtools was successfully installed, enter the first line below into your R console. If everything is fine, you will see the second line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;kp&quot;&gt;Sys.getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;PATH&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;c:\\\\Rtools\\\\bin;c:\\\\Rtools\\\\gcc-4.6.3\\\\bin;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;installing-rcpp-package&quot;&gt;Installing Rcpp package&lt;/h2&gt;

&lt;p&gt;The Rcpp package only works with R3.0.x or later. It can be installed as simple as with other packages.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;install.packages&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Rcpp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If it doesn’t work, try to download the latest version of Rcpp &lt;a href=&quot;Rcpp&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; and install it manually.&lt;/p&gt;

&lt;h2 id=&quot;using-rcpp&quot;&gt;Using Rcpp&lt;/h2&gt;
&lt;p&gt;C++ functions need to be written in &lt;code&gt;.cpp&lt;/code&gt;file(s), apart from R script. If you are using RStudio, you can create one by selecting File &amp;gt; New File &amp;gt; C++ file. Below is the default example of C++ function &lt;code&gt;timesTwo()&lt;/code&gt; given by RStudio. I will save the scirpt under the name &lt;code&gt;test.cpp&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;# include &amp;lt;Rcpp.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rcpp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [[Rcpp::export]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NumericVector&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timesTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumericVector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The two headers are indispensable:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;# include &amp;lt;Rcpp.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rcpp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In &lt;code&gt;test.cpp&lt;/code&gt;, we can define different C++ functions. Each of them has to begin with:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// [[Rcpp::export]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Attention: it’s not like other comment so you cannot omit it! Please note that NumericMatrix and NumericVector are specific types of Rcpp to define matrices and vectors.&lt;/p&gt;

&lt;p&gt;Now, to export &lt;code&gt;timesTwo()&lt;/code&gt; to your R script:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;kn&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;Rcpp&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
SourceCpp&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test.cpp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
v &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
timesTwo&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also include R code blocks in C++ files processed with sourceCpp. The R code will be automatically run after the compilation:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;o&quot;&gt;/***&lt;/span&gt; R
v &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
timesTwo&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;performance-comparison&quot;&gt;Performance comparison&lt;/h2&gt;
&lt;p&gt;Ok, so now that we’ve got some basics out of Rccp, you can do some tests to see how well Rcpp performs by timing your code.  You can either use &lt;code&gt;proc.time()&lt;/code&gt; or &lt;code&gt;system.time()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; using &lt;span class=&quot;kp&quot;&gt;system.time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;system.time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;timesTwo&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; using &lt;span class=&quot;kp&quot;&gt;proc.time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
t &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;proc.time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
timesTwo&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
t &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;proc.time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;t&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, this is the simplest example where timesTwo(v) is no better than v*2 because both take 0s. Let’s do something else that takes R more time: we will create a function in R and another one in C++, both aim to cumulate a matrix by column. In R we use the apply() and the cumsum() function. In C++ we simply build a loop as follow:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// [[Rcpp::export]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NumericMatrix&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cumulation_CPP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumericMatrix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ncol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ncol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NumericMatrix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ncol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ncol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Store this function in test.cpp`. Now return to your R console (or your R script) and try this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;M &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; ncol&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; nrow&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;kp&quot;&gt;system.time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;cumulation_CPP&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;M&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;system.time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;M2 &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;M&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;cumsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;real-life-application-of-rcpp&quot;&gt;Real-life application of Rcpp&lt;/h2&gt;
&lt;p&gt;During my part-time internship at AXA Global P&amp;amp;C, I had to speed-up an Actuarial pricing tool built with R. What I found out is that the core R was already very well written. There is no loop and there are &lt;code&gt;apply()&lt;/code&gt;, &lt;code&gt;sapply()&lt;/code&gt;, &lt;code&gt;lapply()&lt;/code&gt; everywhere. After checking the running time of each bloc of code, I surprisingly identified that those &lt;code&gt;apply()&lt;/code&gt; functions are the main reason of the time cost.&lt;/p&gt;

&lt;p&gt;Thus I decided to recode those functions in C++. What I obtained by the end is a running time reducing of 95%. For example, with 10000 simulations, the running time has reduced from 74.16s to 3.88s. Not bad at all, right?&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
&lt;a href=&quot;/images/temps1.png&quot;&gt;&lt;img src=&quot;/images/temps1.png&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/temps2.png&quot;&gt;&lt;img src=&quot;/images/temps2.png&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/images/temps3.png&quot;&gt;&lt;img src=&quot;/images/temps3.png&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;
&lt;figcaption&gt;Comparison in term of running time: R vs Rcpp&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;to-go-further&quot;&gt;To go further&lt;/h2&gt;
&lt;p&gt;Above is a quick introduction to Rcpp. I didn’t dig too much into Rcpp since my internship didn’t require to. If you want to learn more about Rccp, here are some useful ressources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cran.r-project.org/web/packages/Rcpp/Rcpp.pdf&quot; target=&quot;_blank&quot;&gt;Rcpp doc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.rstudio.com/hc/en-us/articles/200486088-Using-Rcpp-with-RStudio&quot; target=&quot;_blank&quot;&gt;Using Rcpp with RStudio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rcpp.org&quot; target=&quot;_blank&quot;&gt;rcpp.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/RcppCore/Rcpp&quot; target=&quot;_blank&quot;&gt;Rcpp core on GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://adv-r.had.co.nz/Rcpp.html&quot; target=&quot;_blank&quot;&gt;Rcpp from Advanced R by Hadley Wickham&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


    &lt;p&gt;&lt;a href=&quot;/blog/connecting-R-and-Cpp-with-Rcpp/&quot;&gt;Calling C++ from R with Rcpp&lt;/a&gt; was originally published by Duc-Hien VU at &lt;a href=&quot;&quot;&gt;Little Actuary&lt;/a&gt; on November 25, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Blogging like a ninja with Jekyll]]></title>
  <link rel="alternate" type="text/html" href="/blog/blogging-like-a-ninja/" />
  <id>/blog/blogging-like-a-ninja</id>
  <published>2015-11-20T20:39:55+01:00</published>
  <updated>2015-11-20T20:39:55+01:00</updated>
  <author>
    <name>Duc-Hien VU</name>
    <uri></uri>
    <email>duchienvu91@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;This post is about Jekyll, the site generator behind this blog. I have tried some blog services such as Blogger and Wordpress before ending up with Jekyll. So here’s a quick review of these tools based on my experiments!&lt;/p&gt;

&lt;p&gt;Back in 2006 when I was in high school, I found out &lt;a href=&quot;https://www.blogger.com&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Blogger&lt;/strong&gt;&lt;/a&gt; (with subdomain .blogspot.com), a blog-publishing service, written in Python and developed by &lt;a href=&quot;https://en.wikipedia.org/wiki/Pyra_Labs&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Pyra Labs&lt;/strong&gt;&lt;/a&gt;, which was bought by Google in 2003. It was quite interesting back then for a kid with no IT knowledge to play with Blogger. I enjoyed customizing my blog by copying and modifying HTML/CSS code written by other people, without knowing exactly what all of that mean.&lt;/p&gt;

&lt;p&gt;One day, I heard about &lt;a href=&quot;https://en.wikipedia.org/wiki/WordPress&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Wordpress&lt;/strong&gt;&lt;/a&gt;, a CMS based on PHP and MySQL, and found out that most of the famous Blogger templates were converted from Wordpress templates. Wordpress is so far the most famous and succesful CMS in the world. It was used by more than 23.3% of the top 10 million websites as of January 2015. It has a huge number of active contributors and users compared to Blogger. Contrarily to Blogger, Wordpress offers 2 options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wordpress.com&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Wordpress.com&lt;/strong&gt;&lt;/a&gt;: hosted by Wordpress (which means you don’t own your site, Worpress does, just like Google owns all Bloggers),&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wordpress.org&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Worpress.org&lt;/strong&gt;&lt;/a&gt;: a CMS that you can host on your own server and freely add plugins to your Wordpress site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s an example of website I’ve created for the &lt;strong&gt;D.I.A.F. (International Diffusion of French Actuarial Science)&lt;/strong&gt; by using Wordpress.org: &lt;a href=&quot;http://assodiaf.org/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;assodiaf.org&lt;/strong&gt;&lt;/a&gt;. Wordpress (I mean Wordpress.org) is wonderful. I didn’t have to touch a line of code to build such a powerful site. But it also has limits. One of those is that you have to pay for server and domain. Another one is that it works with databases so it is slow and somehow risky (it’s a growing target for hackers).&lt;/p&gt;

&lt;p&gt;Thus, I was searching for a new solution, more adapted to my blogging purpose (something free, faster than Wordpress and cool). After visiting some blogs, I realized that many bloggers have moved from Wordpress to &lt;strong&gt;Jekyll&lt;/strong&gt;, a simple, blog-aware, static site generator written in Ruby. Don’t panic! You don’t need to know about Ruby to blog with Jekyll (I don’t know Ruby). However, the way Jekyll works is quite different from Wordpress. If you are a fan of Wordpress and want to change to Jekyll, it is not trivial in the beginning. Jekyll is easy, but you have to install and work with Jekyll via your terminal console. It took me a while to get familiar with this. Instead of using databases, Jekyll takes the content (plain text format such as Markdown), combine it with the template to produce a static website ready to be served. There is no more databases. Just write your posts with Markdown and Jekyll will take care of other things. Another cool feature of Jekyll is that it happens to be the engine behind GitHub pages. Thus, you can use GitHub to host your Jekyll site for free, as I do with this blog. Awesome right?&lt;/p&gt;

&lt;p&gt;If you want to learn Jekyll, I recommend you to start with some intro to Jekyll videos that can be found on Youtube, like &lt;a href=&quot;https://www.youtube.com/watch?v=O7NBEFmA7yA&quot; target=&quot;_blank&quot;&gt;this one&lt;/a&gt;. Check out the &lt;a href=&quot;http://jekyllrb.com&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Jekyll docs&lt;/strong&gt;&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Jekyll’s GitHub repo&lt;/strong&gt;&lt;/a&gt;. With Jekyll, you can build your site from scratch, or simply use a ready-to-use theme (as I do). Here’s some &lt;a href=&quot;http://jekyllthemes.org&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Jekyll themes&lt;/strong&gt;&lt;/a&gt;. Finally, you should learn some &lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt; syntax before starting your Jekyll blog. That’s all for now!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/blog/blogging-like-a-ninja/&quot;&gt;Blogging like a ninja with Jekyll&lt;/a&gt; was originally published by Duc-Hien VU at &lt;a href=&quot;&quot;&gt;Little Actuary&lt;/a&gt; on November 20, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[(Actuarial) tools with R]]></title>
  <link rel="alternate" type="text/html" href="/blog/Actuarial-applications-with-r/" />
  <id>/blog/Actuarial-applications-with-r</id>
  <published>2015-10-30T20:39:55+01:00</published>
  <updated>2015-10-30T20:39:55+01:00</updated>
  <author>
    <name>Duc-Hien VU</name>
    <uri></uri>
    <email>duchienvu91@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;When I was at school, I did some simple projects with R. Most of them were written in a dirty way (all in a same R script). Then I had a chance to work with R more seriously during my two last internships. I have learned R by reading R programs developed by experienced actuaries. Of course they are not programmers, but their programs are well-structured and much more readable and understandable than mine. A well-structured program (especially when dealing with a complex problem) helps you easily verify and debug your code and help others (who have to audit or modify your code) understand it quickly and effortlessly. Here are some rules that I find very useful for deploying a program with R. I believe they are also true for almost other languages.&lt;/p&gt;

&lt;h3 id=&quot;moduling-your-program&quot;&gt;#1: Moduling your program&lt;/h3&gt;

&lt;p&gt;If your program is long and complex, instead of using one single R script, you should divide your program into separate modules whenever possible and store them in separate R scripts. For example, if you want to develop a pricing tool that proposes 2 different pricing methods, your program structure may look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;reading&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;claims&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;modeling&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;pricing&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;pricing&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Your R program will be called through a &lt;code&gt;main.R&lt;/code&gt; script:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# functions loading       &lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;F-simple_functions.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;F-claims_modeling.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;F-pricing_method1.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;F-pricing_method2.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# input reading&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;E-input_reading.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# claim modeling&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;E-claims_modeling.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# pricing &lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;method &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;E-pricing_method1.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;E-pricing_method2.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This script is the main workflow where your program tells R what to do. To run your program, just execute the &lt;code&gt;main.R&lt;/code&gt; script! Firstly, R will load 4 different scripts that only contain functions (that’s why their names begin with &lt;code&gt;F-&lt;/code&gt;).  While &lt;code&gt;F-simple_functions.R&lt;/code&gt; stores some simple functions that will be used almost everywhere in your program, &lt;code&gt;F-claims_modeling.R&quot;&lt;/code&gt; is reserved to specific functions that will be called in &lt;code&gt;E-claims_modeling.R&lt;/code&gt; and so one. Once all functions are loaded, R will call executive scripts whose name begins with &lt;code&gt;E-&lt;/code&gt;, in a scenario that you have pre-determined in the main script.&lt;/p&gt;

&lt;p&gt;You can also replace each executive script by creating and calling a big function with parameters in order to make your R modules really independent (however, in my experience, it is sometimes complicate to do so). While structuring the program seems useless in this simplified example, it turns out to be very helpful when working with more than hundred lines of code per module.&lt;/p&gt;

&lt;h3 id=&quot;commenting-code&quot;&gt;#2: Commenting code&lt;/h3&gt;
&lt;p&gt;Comment a complex line of code, a function or a variable is a good habit and should be done whenever it is possible. I remember how hard it was for me to understand a bloc of code written by others (or even by myself long ago) without any comments.&lt;/p&gt;

&lt;p&gt;I recently found out that it is better to comment a function from inside. Let’s take an example where I declare the function &lt;code&gt;beautifulAmount()&lt;/code&gt; in &lt;code&gt;F-simple_functions.R&lt;/code&gt; and I call it in the main script &lt;code&gt;main.R&lt;/code&gt;. I used to comment this function this way:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# function to dislay claim amount in a beautiful way&lt;/span&gt;
beautifulAmount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;scientific&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; big.mark&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When I look at this function in &lt;code&gt;F-simple_functions.R&lt;/code&gt;, I can understand it immediately thanks to the comment. However, if I identify this function in &lt;code&gt;main.R&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;y &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; beautifulAmount&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and I forget what it was supposed to do, I’m obligated to re-open &lt;code&gt;F-simple_functions.R&lt;/code&gt;. Now, I put my comment inside the function:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;beautifulAmount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# function to dislay claim amount in a beautiful way&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;scientific&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; big.mark&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Whenever I have a doubt with the purpose of this function, I only need to write “beautifulAmount” in my R console and hit enter. R will show me the full code of the function &lt;code&gt;beautifulAmount()&lt;/code&gt;, including the comment inside. By this way, I don’t need to open &lt;code&gt;F-simple_functions.R&lt;/code&gt; to understand &lt;code&gt;beautifulAmount()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;naming-your-variables-wisely&quot;&gt;#3: Naming your variables wisely&lt;/h3&gt;

&lt;p&gt;A good variable name is a meaningful name, not too short, not too long. However, when naming an index variable, we usually choose a meaningless letter such as “i”, “j” or “k”. In this case, a friend of mine has taught me that “ii” is better than “i”. Instead of:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;beautifulAmount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;n&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;you should write:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;beautifulAmount &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;ii &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;n&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using the second option, when you need to find and modify your loop, you just need to jump into your R script and search (&lt;code&gt;Ctrl + F&lt;/code&gt;) “ii”. With the first option, doing a search of “i” letter in your whole script seems desperate.&lt;/p&gt;

&lt;h3 id=&quot;using-list&quot;&gt;#4: Using list()&lt;/h3&gt;
&lt;p&gt;If you have many variables to work with in your program, you should group them into lists. The two basic lists are &lt;code&gt;input()&lt;/code&gt;and &lt;code&gt;output()&lt;/code&gt; but you are not obligated to stay with these two. In the above example of pricing, you can create one list for variables of each method. By doing so, each method is somehow similar to an object.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;output.method1 &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
output.method2 &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To declare variables that will be used in the method 1:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;output.method1&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;name &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;historical method&amp;quot;&lt;/span&gt;
output.method1&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;premium &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;frequency&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;severity&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For listing all elements of this list&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;kp&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;output.method1&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# or without print()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For listing the names of all elements of this list, write:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;kp&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;output.method1&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These simple habits of programming are surprisingly useful in practice, for both code writers and code readers.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/blog/Actuarial-applications-with-r/&quot;&gt;(Actuarial) tools with R&lt;/a&gt; was originally published by Duc-Hien VU at &lt;a href=&quot;&quot;&gt;Little Actuary&lt;/a&gt; on October 30, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[MathJax Example]]></title>
  <link rel="alternate" type="text/html" href="/blog/mathjax-example/" />
  <id>/blog/mathjax-example</id>
  <published>2015-08-10T14:08:50+02:00</published>
  <updated>2015-08-10T14:08:50+02:00</updated>
  <author>
    <name>Duc-Hien VU</name>
    <uri></uri>
    <email>duchienvu91@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt; is a simple way of including Tex/LaTex/MathML based mathematics in HTML webpages. To get up and running you need to include the MathJax script in the header of your github pages page, and then write some maths. For LaTex, there are two delimiters you need to know about, one for block or displayed mathematics &lt;code&gt;\[ ... \]&lt;/code&gt;, and the other for inline mathematics &lt;code&gt;\( ... \)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To enable MathJax support be sure Kramdown is your Markdown flavor of choice and MathJax is set to true in your &lt;code&gt;_config.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;markdown: kramdown
mathjax: true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Here is an example MathJax inline rendering \\( 1/x^{2} \\), and here is a block rendering: 
\\[ \frac{1}{n^{2}} \\]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example MathJax inline rendering \( 1/x^{2} \), and here is a block rendering: 
\[ \frac{1}{n^{2}} \]&lt;/p&gt;

&lt;p&gt;The only thing to look out for is the escaping of the backslash when using markdown, so the delimiters become &lt;code&gt;\\[ ... \\]&lt;/code&gt; and &lt;code&gt;\\( ... \\)&lt;/code&gt; for inline and block maths respectively.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/blog/mathjax-example/&quot;&gt;MathJax Example&lt;/a&gt; was originally published by Duc-Hien VU at &lt;a href=&quot;&quot;&gt;Little Actuary&lt;/a&gt; on August 10, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>