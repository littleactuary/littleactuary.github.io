<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Little Actuary</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2015-11-30T21:39:41+01:00</updated>
<id>/</id>
<author>
  <name>Duc-Hien VU</name>
  <uri>/</uri>
  <email>duchienvu91@gmail.com</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Good habits of writing R programs]]></title>
  <link rel="alternate" type="text/html" href="/blog/Readable%20and%20understandble%20R%20programs/" />
  <id>/blog/Readable and understandble R programs</id>
  <published>2015-11-30T20:39:55+01:00</published>
  <updated>2015-11-30T20:39:55+01:00</updated>
  <author>
    <name>Duc-Hien VU</name>
    <uri></uri>
    <email>duchienvu91@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;When I was at school, I did some simple projects with R. Most of them were written in a dirty way (all in a same R script). Then I had a chance to work with R more seriously during two internships. I have learnt R from reading R programs developed by experienced actuaries. Of course they are not programmers, but their programs are well-structured and much more readable and understanbdle than mine. A well-structured program (especially when dealing with a complex problem) helps you easily verify and debug your code and help others (who have to audit or modify your code) understand it quickly and effortlessly. Here are some rules that I have learnt for deploying a program with R. I believe they are also true for almost other languages.&lt;/p&gt;

&lt;h3 id=&quot;rule-number-1-moduling-your-program&quot;&gt;Rule number 1: Moduling your program&lt;/h3&gt;

&lt;p&gt;If your program is long and complex, instead of using one single R script, you should divide your program into separate modules whenever possible and store them in separate R scripts. For example, if you want to develop a pricing tool that proposes 2 different pricing methods, your program structure should look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;reading&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;claims&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;modeling&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;pricing&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;pricing&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Your R program will be called through a &lt;code&gt;main.R&lt;/code&gt; script&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;functions&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;loading&lt;/span&gt;       
&lt;span class=&quot;nt&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;F-simple_functions.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;F-claims_modeling.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;F-pricing_method1.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;F-pricing_method2.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;reading&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;E-input_reading.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;claim&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;modeling&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;E-claims_modeling.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;pricing&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;E-pricing_method1.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;E-pricing_method2.R&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This script is the main workflow where your program tell R what to do. to run your program, just execute the &lt;code&gt;main.R&lt;/code&gt; script! Firstly, R will load 4 different scripts that only contains functions (that’s why their names begin with &lt;code&gt;F-&lt;/code&gt;).  While &lt;code&gt;F-simple_functions.R&lt;/code&gt; stores some simple functions that will be used almost everywhere in your program, &lt;code&gt;F-claims_modeling.R&quot;&lt;/code&gt; is reserved to specific functions that will be called in &lt;code&gt;E-claims_modeling.R&lt;/code&gt; and so one. Once all functions are loaded, R will call executive scripts whose names begin with &lt;code&gt;E-&lt;/code&gt;, in a scenario that you have pre-determined in the main script.&lt;/p&gt;

&lt;p&gt;The below scheme summarize the structure of your program.&lt;/p&gt;

&lt;p&gt;While structuring the program seems useless in this simplified example, it happened to be very helpful when I worked with more than hundred lines of code per modules&lt;/p&gt;

&lt;h3 id=&quot;rule-number-2-adding-comments&quot;&gt;Rule number 2: Adding comments&lt;/h3&gt;
&lt;p&gt;Comment a complex line of code, a function or a variable is a good habit and it should be done whenever it is possible. I remember how hard it was for me to understand a bloc of code written by others (or even by myself long ago) without any comments.&lt;/p&gt;

&lt;p&gt;I recently found out that it is better to comment a function inside of it. Let’s take an example where I declare the function &lt;code&gt;beautifulAmount()&lt;/code&gt; in &lt;code&gt;F-simple_functions.R&lt;/code&gt; and I called it in the main script &lt;code&gt;main.R&lt;/code&gt;. I used to comment this function right above of where it is declared:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;dislay&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;claim&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;beautiful&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;way&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;beautifulAmount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scientific&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When I look at this function in &lt;code&gt;F-simple_functions.R&lt;/code&gt;, I can understand it immediately thanks to the comment. However, if I identify this function in &lt;code&gt;main.R&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;beautifulAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and I forget what it was supposed to do, I’m obligated to re-open &lt;code&gt;F-simple_functions.R&lt;/code&gt;. Now, I put the comment inside the function:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;beautifulAmount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dislay&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;claim&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beautiful&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;way&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scientific&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Whenever I have a doubt with the purpose of this function, I only need to write “beautifulAmount” in my R console and hit enter. R will show me the full code of the function &lt;code&gt;beautifulAmount()&lt;/code&gt;, including the comment inside. By this way, I don’t need to open &lt;code&gt;F-simple_functions.R&lt;/code&gt; to understand &lt;code&gt;beautifulAmount()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;rule-number-3-naming-your-variables-wisely&quot;&gt;Rule number 3: Naming your variables wisely&lt;/h3&gt;

&lt;p&gt;A good variable name is a meaningful name, not too short, not too long. A friend of mine has taught me an interesting way of naming an index variable (what we use to name &lt;code&gt;i&lt;/code&gt; or &lt;code&gt;j&lt;/code&gt; or &lt;code&gt;k&lt;/code&gt;). Instead of:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;beautifulAmount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;you should write:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;beautifulAmount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ii&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using the second option, when you need to find and modify your loop, you just need to jump into your R script and search (&lt;code&gt;Ctrl + F&lt;/code&gt;) “ii”. With the first option, a search of “i” letter in your whole script seems desperate.&lt;/p&gt;

&lt;h3 id=&quot;rule-number-4-using-list&quot;&gt;Rule number 4: Using list()&lt;/h3&gt;
&lt;p&gt;If you have many variables to work with in your program, you should group them into lists. The two basic lists are &lt;code&gt;input()&lt;/code&gt;and &lt;code&gt;output()&lt;/code&gt;. In the above example of pricing, you can create one list for variables of each method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.method1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.method2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To declare a variable that will be used in the method 1:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.method1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;premium&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For listing all elements of this list&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.method1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;without&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;directly&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;console&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For listing the names of all elements of this list, write:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.method1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These simple habits of programming are surprisingly useful in practice, for both code writers and code readers.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/blog/Readable%20and%20understandble%20R%20programs/&quot;&gt;Good habits of writing R programs&lt;/a&gt; was originally published by Duc-Hien VU at &lt;a href=&quot;&quot;&gt;Little Actuary&lt;/a&gt; on November 30, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Blogging like a ninja with Jekyll]]></title>
  <link rel="alternate" type="text/html" href="/blog/blogging-like-a-ninja/" />
  <id>/blog/blogging-like-a-ninja</id>
  <published>2015-11-20T20:39:55+01:00</published>
  <updated>2015-11-20T20:39:55+01:00</updated>
  <author>
    <name>Duc-Hien VU</name>
    <uri></uri>
    <email>duchienvu91@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;This post, whose title was inspired by some &lt;a href=&quot;https://www.udemy.com&quot; target=&quot;_blank&quot;&gt;Udemy&lt;/a&gt; course, is about Jekyll!&lt;/p&gt;

&lt;p&gt;Back in 2006 when I was in high school, I found out &lt;a href=&quot;https://www.blogger.com&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Blogger&lt;/strong&gt;&lt;/a&gt; (with subdomain .blogspot.com), a blog-publishing service, written in Python and developed by &lt;a href=&quot;https://en.wikipedia.org/wiki/Pyra_Labs&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Pyra Labs&lt;/strong&gt;&lt;/a&gt;, which was bought by Google in 2003. It was quite interesting back then for a kid with no IT knowledge to blog with Blogger. I enjoyed customizing my blog by copying and modifying HTML/CSS code written by other people, without knowing exactly what all of that mean.&lt;/p&gt;

&lt;p&gt;One day, I heard about &lt;a href=&quot;https://en.wikipedia.org/wiki/WordPress&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Wordpress&lt;/strong&gt;&lt;/a&gt;, a CMS based on PHP and MySQL, and found out that most of the famous Blogger templates were converted from Wordpress templates. Wordpress is so far the most famous and succesful CMS in the world. It was used by more than 23.3% of the top 10 million websites as of January 2015. It has a huge number of active contributors and users compared to Blogger. Contrarily to Blogger, Wordpress offers 2 options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wordpress.com&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Wordpress.com&lt;/strong&gt;&lt;/a&gt;: hosted by Wordpress (which means you don’t own your site, Worpress does, just like Google owns all Bloggers),&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wordpress.org&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Worpress.org&lt;/strong&gt;&lt;/a&gt;: a CMS that you can host on your own server and freely add plugins to your Wordpress site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s an example of site I’ve created for &lt;strong&gt;D.I.A.F. (International Diffusion of French Actuarial Science)&lt;/strong&gt; by using Wordpress.org: &lt;a href=&quot;http://assodiaf.org/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;assodiaf.org&lt;/strong&gt;&lt;/a&gt;. Wordpress (I mean Wordpress.org) is wonderful. I didn’t have to touch a line of code to build such a powerful site. But it also has limits. One of those is that you have to pay for server and domain. Another one is that it works with databases so it is slow and somehow risky (it’s a growing target for hackers).&lt;/p&gt;

&lt;p&gt;I was searching for a new solution, more adapted to my blogging purpose (something free, faster than Wordpress and cool). After visiting some blogs, I found out that many bloggers have moved from Wordpress to &lt;strong&gt;Jekyll&lt;/strong&gt;, a simple, blog-aware, static site generator written in Ruby. Don’t panic! You don’t need to know about Ruby to blog with Jekyll (I don’t know Ruby). However, the way Jekyll works is quite different from Wordpress. If you are a fan of Wordpress and want to change to Jekyll, it is not trivial at the first time. Jekyll is easy, but you have to work with Jekyll via your terminal window. It took me a while to get familiar with this. Instead of using databases, Jekyll takes the content (plain text format such as Markdown), combine it with the template to produce a static website ready to be served. There is no more databases. Just write your posts with Markdown and Jekyll will take care of other things. Another cool feature about Jekyll is that it happens to be the engine behind GitHub pages. Thus, you can use GitHub to host your Jekyll site for free. Awesome right?&lt;/p&gt;

&lt;p&gt;If you want to learn Jekyll, I recommend you to start with some intro to Jekyll videos that can be found on Youtube, like &lt;a href=&quot;https://www.youtube.com/watch?v=O7NBEFmA7yA&quot; target=&quot;_blank&quot;&gt;this one&lt;/a&gt;. Check out the &lt;a href=&quot;http://jekyllrb.com&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Jekyll docs&lt;/strong&gt;&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Jekyll’s GitHub repo&lt;/strong&gt;&lt;/a&gt;. With Jekyll, you can build your site from scratch, or simply use a ready-to-use theme (as I did). Here’s some &lt;a href=&quot;http://jekyllthemes.org&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Jekyll themes&lt;/strong&gt;&lt;/a&gt;. Finally, you should learn some &lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt; syntax before starting your Jekyll blog. That’s all for now!&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/blog/blogging-like-a-ninja/&quot;&gt;Blogging like a ninja with Jekyll&lt;/a&gt; was originally published by Duc-Hien VU at &lt;a href=&quot;&quot;&gt;Little Actuary&lt;/a&gt; on November 20, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[MathJax Example]]></title>
  <link rel="alternate" type="text/html" href="/blog/mathjax-example/" />
  <id>/blog/mathjax-example</id>
  <published>2015-08-10T14:08:50+02:00</published>
  <updated>2015-08-10T14:08:50+02:00</updated>
  <author>
    <name>Duc-Hien VU</name>
    <uri></uri>
    <email>duchienvu91@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt; is a simple way of including Tex/LaTex/MathML based mathematics in HTML webpages. To get up and running you need to include the MathJax script in the header of your github pages page, and then write some maths. For LaTex, there are two delimiters you need to know about, one for block or displayed mathematics &lt;code&gt;\[ ... \]&lt;/code&gt;, and the other for inline mathematics &lt;code&gt;\( ... \)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To enable MathJax support be sure Kramdown is your Markdown flavor of choice and MathJax is set to true in your &lt;code&gt;_config.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;markdown: kramdown
mathjax: true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Here is an example MathJax inline rendering \\( 1/x^{2} \\), and here is a block rendering: 
\\[ \frac{1}{n^{2}} \\]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example MathJax inline rendering \( 1/x^{2} \), and here is a block rendering: 
\[ \frac{1}{n^{2}} \]&lt;/p&gt;

&lt;p&gt;The only thing to look out for is the escaping of the backslash when using markdown, so the delimiters become &lt;code&gt;\\[ ... \\]&lt;/code&gt; and &lt;code&gt;\\( ... \\)&lt;/code&gt; for inline and block maths respectively.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/blog/mathjax-example/&quot;&gt;MathJax Example&lt;/a&gt; was originally published by Duc-Hien VU at &lt;a href=&quot;&quot;&gt;Little Actuary&lt;/a&gt; on August 10, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>